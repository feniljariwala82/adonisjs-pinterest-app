@layout('layouts/main')
@set('title','Create Post')

@section('content')
<div class="container mb-5 mt-5">

  <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="{{ route('post.index') }}">Posts</a></li>
      <li class="breadcrumb-item active" aria-current="page">Create</li>
    </ol>
  </nav>

  <div class="row">
    <div class="col-12 col-md-6">
      <h4 class="mb-4 fs-4 fw-bold  text-center">Image Preview</h4>

      {{-- image preview  --}}
      <div class="col-12">
        <img src="" class="img-thumbnail" alt="Image" id="upImage" style="display:none;">
        <p class="fs-4 text-capitalize text-center" id="imgMessage">Image not selected!</p>
      </div>

    </div>
    <div class="col-12 col-md-6">
      <form action="{{ route('post.store') }}" method="POST" id="myForm">
        {{ csrfField() }}

        <div class="d-flex flex-column justify-content-center align-items-center">
          <div class="col align-items-start">
            <h4 class="mb-4 fs-4 fw-bold">Create Post</h4>
          </div>

          {{--  alert container  --}}
          <div class="col-12 col-md-10 col-lg-8 col-xl-7 col-xxl-6">
            <div class="alert alert-dismissible fade show" role="alert" id="alertContainer" style="display:none;">
              <p id="alertMsg"></p>
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          </div>

          {{--  title input field starts --}}
          <div class="col-12 col-md-10 col-lg-8 col-xl-7 col-xxl-6">
            <div class="form-floating mb-3">
              <input type="text" class="form-control {{ flashMessages.has('errors.title') && 'is-invalid' }}"
                id="titleInput" name="title" placeholder="create song" value="{{ flashMessages.get('title', '') }}"
                required>
              <label for="floatingInput">Post Title</label>
            </div>

            {{--  description starts  --}}
            <div class="form-floating mb-3">
              <textarea class="form-control" placeholder="Leave a description here" id="descriptionInput"
                name="description" value="{{ flashMessages.get('description', '') }}" style="height: 100px"
                required></textarea>
              <label for="floatingTextarea2">Post Description</label>
            </div>
            {{--  description ends  --}}

            {{--  postImage dropdown starts  --}}
            <div class="form-floating mb-3">
              <div class="input-group mb-3">
                <input type="file" class="form-control" id="postImage" name="postImage">
                <label class="input-group-text" for="inputGroupFile01">Upload</label>
              </div>
            </div>
            {{--  postImage dropdown ends  --}}
          </div>
          {{--  title input field ends --}}

          <div class="col-12 col-md-10 col-lg-8 col-xl-7 col-xxl-6">
            @!component('components/tag/input')
          </div>

          {{--  buttons  --}}
          <div class="col-12 col-md-10 col-lg-8 col-xl-7 col-xxl-6 mt-4">
            <button class="btn btn-primary" id="submit">Create Post</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  $(document).ready(() => {
    // alert
    const $alert = $('#alertContainer')
    const $alertMsg = $("#alertMsg")
    const showErrorAlert = (message) => {
      $alert.css('display', 'block').addClass('alert-danger')
      $alertMsg.append(`<strong>Error </strong>${message}`)
    }

    $('#closeBtn').on('click', () => {
      $('#btn').addClass('fade')
    })

    // let file
    $('input[type="file"]').change(function (e) {
      console.log('changed')
      var fileName = e.target.files[0].name;

      var reader = new FileReader();
      reader.onload = (e) => {
        // get loaded data and render thumbnail.
        $("#upImage")
          .css('display', 'block')
          .attr('src', e.target.result)
        $('#imgMessage').css('display', 'none')
      };
      // read the image file as a data URL.
      file = this.files[0]
      reader.readAsDataURL(this.files[0]);
    });

    let formData = new FormData()

    // on image change adding image to the file object, that we can use in form data
    let file
    $('#postImage').on('change', function (event) {
      event.preventDefault()
      file = this.files[0]
    })

    /**
     * submit form using ajax
     */
    $('#submit').on('click', async (event) => {
      event.preventDefault()

      // starting spinner
      spinner.startLoading()

      formData.append('title', $('#titleInput').val())
      formData.append('description', $('#descriptionInput').val())
      formData.append('postImage', file)
      // fetching value from tag input
      const tags = JSON.parse($("#tags").val())
      for (let i = 0; i < tags.length; i++) {
        formData.append('tags[]', tags[i]);
      }

      // sending the request
      try {
        await $.ajax({
          url: "{{ route('post.store') }}",
          method: 'POST',
          data: formData,
          cache: false,
          contentType: false,
          processData: false,
          timeout: 60000,
          headers: {
            'X-XSRF-TOKEN': helper.getCookie('XSRF-TOKEN'),
          },
        })
        window.location.href = "{{ route('post.index') }}"
      } catch (error) {
        /**
         * On error resetting form data for data duplication, 
         */
        formData = new FormData()
        toast.error(error.responseText)
      } finally {
        spinner.stopLoading()
      }
    })
  })

</script>
@endsection
